# Problem 12

=begin

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
Let us list the factors of the first seven triangle numbers:
 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred divisors?

=end

class Problem12

	def initialize
		@result = 0
	end

	def DoMath
		divisors = 0
		i = 1
		coprimeEven = 1
		coprimeOdd = 1
		begin
		    if (i % 2 == 0) 
		        coprimeEven = Factors(i+1).length 
		        divisors = coprimeEven * coprimeOdd
		    else 
		        coprimeOdd = Factors((i+1)/2).length 
		        divisors = coprimeEven * coprimeOdd
		    end
		    i+=1;
		end while (divisors <= 500)
		naturalNumber = i - 1
		@result = ((naturalNumber * (naturalNumber + 1)) / 2)
	end

	def Factors(num) 
		1.upto(Math.sqrt(num)).select {|i| (num % i).zero?}.inject([]) do |f, i| 
			f << i
			f << num/i unless i == num/i
			f
    	end.sort
	end

	attr_reader :result

end